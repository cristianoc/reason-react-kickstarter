// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");

function LoaderComponent(Config) {
  var LoaderComponent$LoaderComponent = function (Props) {
    var fetchData = Props.fetchData;
    var renderView = Props.renderView;
    var match = React.useState((function () {
            return /* Loading */1;
          }));
    var setState = match[1];
    var state = match[0];
    React.useEffect((function () {
            if (typeof state === "number") {
              if (state !== 1) {
                
              } else {
                Curry._1(fetchData, /* () */0).then((function (result) {
                          return Promise.resolve(Curry._1(setState, (function (param) {
                                            return /* Success */[result];
                                          })));
                        })).catch((function (_error) {
                        return Promise.resolve(Curry._1(setState, (function (param) {
                                          return /* Error */2;
                                        })));
                      }));
              }
            }
            return undefined;
          }), /* array */[state]);
    var tmp;
    if (typeof state === "number") {
      switch (state) {
        case 0 : 
            tmp = React.createElement("div", undefined, "Init...");
            break;
        case 1 : 
            tmp = React.createElement("div", undefined, "Loading");
            break;
        case 2 : 
            tmp = React.createElement("div", undefined, "Error...");
            break;
        
      }
    } else {
      tmp = Curry._2(renderView, state[0], (function (param) {
              return Curry._1(setState, (function (param) {
                            return /* Loading */1;
                          }));
            }));
    }
    return React.createElement("div", undefined, tmp);
  };
  return /* module */[/* make */LoaderComponent$LoaderComponent];
}

function LoaderComponentWithoutRefresh(Config) {
  var LoaderComponent$LoaderComponent = function (Props) {
    var fetchData = Props.fetchData;
    var renderView = Props.renderView;
    var match = React.useState((function () {
            return /* Loading */1;
          }));
    var setState = match[1];
    var state = match[0];
    React.useEffect((function () {
            if (typeof state === "number") {
              if (state !== 1) {
                
              } else {
                Curry._1(fetchData, /* () */0).then((function (result) {
                          return Promise.resolve(Curry._1(setState, (function (param) {
                                            return /* Success */[result];
                                          })));
                        })).catch((function (_error) {
                        return Promise.resolve(Curry._1(setState, (function (param) {
                                          return /* Error */2;
                                        })));
                      }));
              }
            }
            return undefined;
          }), /* array */[state]);
    var tmp;
    if (typeof state === "number") {
      switch (state) {
        case 0 : 
            tmp = React.createElement("div", undefined, "Init...");
            break;
        case 1 : 
            tmp = React.createElement("div", undefined, "Loading");
            break;
        case 2 : 
            tmp = React.createElement("div", undefined, "Error...");
            break;
        
      }
    } else {
      tmp = Curry._2(renderView, state[0], (function (param) {
              return Curry._1(setState, (function (param) {
                            return /* Loading */1;
                          }));
            }));
    }
    return React.createElement("div", undefined, tmp);
  };
  var BaseLoaderComponent = /* module */[/* make */LoaderComponent$LoaderComponent];
  var LoaderComponent$LoaderComponentWithoutRefresh = function (Props) {
    var fetchData = Props.fetchData;
    var renderView = Props.renderView;
    return React.createElement(LoaderComponent$LoaderComponent, {
                fetchData: fetchData,
                renderView: (function (data, _onRefresh) {
                    return Curry._1(renderView, data);
                  })
              });
  };
  return /* module */[
          /* BaseLoaderComponent */BaseLoaderComponent,
          /* make */LoaderComponent$LoaderComponentWithoutRefresh
        ];
}

exports.LoaderComponent = LoaderComponent;
exports.LoaderComponentWithoutRefresh = LoaderComponentWithoutRefresh;
/* react Not a pure module */
